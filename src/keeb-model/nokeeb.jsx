/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, PerspectiveCamera} from '@react-three/drei'
import { useLoader } from '@react-three/fiber';
import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';
import { MeshPhysicalMaterial } from 'three';
import KeebMat from './keeb-material'


export default function Model(props) {

    const group = useRef();
    const { nodes } = useGLTF('/noalphakeeb.glb')    
    const texture = useLoader(RGBELoader, '/empty_warehouse_01_2k.hdr');
    console.log('HDR Texture Loaded:', texture);



    const jellyMaterialEsc=  new MeshPhysicalMaterial({
      color: '#172A3A',
        roughness: 0.2,
        metalness: 0.2,
        reflectivity: .3,
        opacity: 0.8,
        transmission: 0.9,
        thickness: 1,
        clearcoat: .3,
        clearcoatRoughness: .2,

    });

    const jellyMaterialKeys= new MeshPhysicalMaterial({
      color: '#508991',
        roughness: 0.2,
        metalness: 0.2,
        reflectivity: .3,
        opacity: 0.8,
        transmission: 0.9,
        thickness: 1,
        clearcoat: .3,
        clearcoatRoughness: .2,

    });

    const jellyEnter= new MeshPhysicalMaterial({
        color: '#172A3A',
        roughness: 0.2,
        metalness: 0.2,
        reflectivity: .3,
        opacity: 0.8,
        transmission: 0.9,
        thickness: 1,
        clearcoat: .3,
        clearcoatRoughness: .2,
        
    });
    
   
    const jellySpace= new MeshPhysicalMaterial({

        color: '#172A3A',
        roughness: 0.2,
        metalness: 0.2,
        reflectivity: .3,
        opacity: 0.8,
        transmission: 0.9,
        thickness: 1,
        clearcoat: .3,
        clearcoatRoughness: .2,
  });

  const textMat= new MeshPhysicalMaterial({

    color: '#F7EBEC',
    roughness: 0.2,
    opacity: 1,
    transmission: 0.99,
    thickness: 1,
});

    const handleClick = (event) => {
  
      const meshName= event.object.name;
      switch(meshName) {
        case 'Esc':
          window.location.href= '/About';
          break;
        
        case 'Enter':
          window.location.href= '/Personas';
          break;
        
        case 'Spacebar':
          window.location.href='/Quiz';
          break;
          
        default:
          break;
      }
    };
  
    useEffect(() => {
      const currentGroup = group.current;
  
      currentGroup.children.forEach((child) => {
        child.addEventListener('click', handleClick);
  
      });
  
      return () => {
        currentGroup.children.forEach((child) => {
          child.removeEventListener('click', handleClick);
        });
      };
    }, []);
  
  
 
    return (
      <group ref={group} {...props} dispose={null}>
        <directionalLight
          color="#EACDC2"
          name="DirectionalLight"
          intensity={1}
          position={[4.34, 5.625, 2.139]}
        />
        <directionalLight
          name="DirectionalLight_2"
          intensity={2.5}
          decay={2}
          position={[-2.709, 4.245, -4.818]}
        />
        <directionalLight
          name="DirectionalLight_4"
          intensity={2.5}
          decay={2}
          position={[-5.465, 0.791, 4.717]}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Board.geometry}
          position={[0.171, 0.401, -0.205]}
          rotation={[0, 0.677, 0]}
          >
        <KeebMat/>
        </mesh>

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key1.geometry}
          material={jellyMaterialEsc}
          position={[-1.648, 1.933, 3.677]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        />     
        

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key2.geometry}
          position={[-2.227, 1.924, 2.958]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        >
          <KeebMat />
        </mesh>


        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key3.geometry}
          material={jellyMaterialKeys}
          position={[-2.811, 1.92, 2.23]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        >
          <KeebMat/>
        </mesh> 


        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key4.geometry}
          material={jellyMaterialKeys}
          position={[-3.398, 1.924, 1.501]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        >
          <KeebMat/>
        </mesh>


        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key5.geometry}
          material={jellyEnter}
          position={[-1.605, 0.919, -1.133]}
          rotation={[0, 0.677, 0]}
          scale={[0.568, 0.341, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key6.geometry}
          material={jellyMaterialKeys}
          position={[-1.058, 1.907, 2.996]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        >
          <KeebMat/>
        </mesh>

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key7.geometry}
          material={jellyMaterialKeys}
          position={[-1.645, 1.897, 2.266]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        >
          <KeebMat/>
        </mesh>


        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Key8.geometry}
          material={jellyMaterialKeys}
          position={[-2.226, 1.894, 1.543]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        >
          <KeebMat/>
        </mesh>



        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Spacebar.geometry}
          material={jellySpace}
          position={[-0.264, 1.889, 2.574]}
          rotation={[0, 0.677, 0]}
          scale={[1, 0.686, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Start.geometry}
          material={textMat}
          position={[0.879, 1.058, -0.884]}
          rotation={[-Math.PI, 0.901, -Math.PI]}
          scale={[0.294, 0.225, 0.328]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Personas.geometry}
          material={textMat}
          position={[-0.691, 1.047, -1.331]}
          rotation={[-Math.PI, 0.891, -Math.PI]}
          scale={0.273}
        />
        <mesh
          geometry={nodes.About.geometry}
          material={textMat}
          position={[0.879, 1.053, 1.965]}
          rotation={[-Math.PI, 0.908, -Math.PI]}
          scale={0.19}
        />
        <PerspectiveCamera
          makeDefault={false}
          far={1000}
          near={0.1}
          fov={17.88}
          position={[4.022, 19.58, -2.429]}
          rotation={[-1.694, 0.107, 2.262]}
        />
      </group>
    );
  }
  
  useGLTF.preload('/noalphakeeb.glb')
  